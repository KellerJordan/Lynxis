[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar DDP = Package['ddp-client'].DDP;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ValidatedMethod;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mdg:validated-method\":{\"validated-method.js\":[\"babel-runtime/helpers/classCallCheck\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_validated-method/validated-method.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});\n/* global ValidatedMethod:true */                                                                                     //\n                                                                                                                      //\nValidatedMethod = function () {                                                                                       // 3\n  function ValidatedMethod(options) {                                                                                 // 4\n    var _connection$methods;                                                                                          // 4\n                                                                                                                      //\n    _classCallCheck(this, ValidatedMethod);                                                                           // 4\n                                                                                                                      //\n    // Default to no mixins                                                                                           //\n    options.mixins = options.mixins || [];                                                                            // 6\n    check(options.mixins, [Function]);                                                                                // 7\n    check(options.name, String);                                                                                      // 8\n    options = applyMixins(options, options.mixins);                                                                   // 9\n                                                                                                                      //\n    // connection argument defaults to Meteor, which is where Methods are defined on client and                       //\n    // server                                                                                                         //\n    options.connection = options.connection || Meteor;                                                                // 13\n                                                                                                                      //\n    // Allow validate: null shorthand for methods that take no arguments                                              //\n    if (options.validate === null) {                                                                                  // 16\n      options.validate = function () {};                                                                              // 17\n    }                                                                                                                 // 18\n                                                                                                                      //\n    // If this is null/undefined, make it an empty object                                                             //\n    options.applyOptions = options.applyOptions || {};                                                                // 21\n                                                                                                                      //\n    check(options, Match.ObjectIncluding({                                                                            // 23\n      name: String,                                                                                                   // 24\n      validate: Function,                                                                                             // 25\n      run: Function,                                                                                                  // 26\n      mixins: [Function],                                                                                             // 27\n      connection: Object,                                                                                             // 28\n      applyOptions: Object                                                                                            // 29\n    }));                                                                                                              // 23\n                                                                                                                      //\n    // Default options passed to Meteor.apply, can be overridden with applyOptions                                    //\n    var defaultApplyOptions = {                                                                                       // 33\n      // Make it possible to get the ID of an inserted item                                                           //\n      returnStubValue: true,                                                                                          // 35\n                                                                                                                      //\n      // Don't call the server method if the client stub throws an error, so that we don't end                        //\n      // up doing validations twice                                                                                   //\n      throwStubExceptions: true                                                                                       // 39\n    };                                                                                                                // 33\n                                                                                                                      //\n    options.applyOptions = _.extend({}, defaultApplyOptions, options.applyOptions);                                   // 42\n                                                                                                                      //\n    // Attach all options to the ValidatedMethod instance                                                             //\n    _.extend(this, options);                                                                                          // 45\n                                                                                                                      //\n    var method = this;                                                                                                // 47\n    this.connection.methods((_connection$methods = {}, _connection$methods[options.name] = function (args) {          // 48\n      // Silence audit-argument-checks since arguments are always checked when using this package                     //\n      check(args, Match.Any);                                                                                         // 51\n      var methodInvocation = this;                                                                                    // 52\n                                                                                                                      //\n      return method._execute(methodInvocation, args);                                                                 // 54\n    }, _connection$methods));                                                                                         // 55\n  }                                                                                                                   // 57\n                                                                                                                      //\n  ValidatedMethod.prototype.call = function () {                                                                      // 3\n    function call(args, callback) {                                                                                   // 3\n      // Accept calling with just a callback                                                                          //\n      if (_.isFunction(args)) {                                                                                       // 61\n        callback = args;                                                                                              // 62\n        args = {};                                                                                                    // 63\n      }                                                                                                               // 64\n                                                                                                                      //\n      try {                                                                                                           // 66\n        return this.connection.apply(this.name, [args], this.applyOptions, callback);                                 // 67\n      } catch (err) {                                                                                                 // 68\n        if (callback) {                                                                                               // 69\n          // Get errors from the stub in the same way as from the server-side method                                  //\n          callback(err);                                                                                              // 71\n        } else {                                                                                                      // 72\n          // No callback passed, throw instead of silently failing; this is what                                      //\n          // \"normal\" Methods do if you don't pass a callback.                                                        //\n          throw err;                                                                                                  // 75\n        }                                                                                                             // 76\n      }                                                                                                               // 77\n    }                                                                                                                 // 78\n                                                                                                                      //\n    return call;                                                                                                      // 3\n  }();                                                                                                                // 3\n                                                                                                                      //\n  ValidatedMethod.prototype._execute = function () {                                                                  // 3\n    function _execute(methodInvocation, args) {                                                                       // 3\n      methodInvocation = methodInvocation || {};                                                                      // 81\n                                                                                                                      //\n      // Add `this.name` to reference the Method name                                                                 //\n      methodInvocation.name = this.name;                                                                              // 84\n                                                                                                                      //\n      var validateResult = this.validate.bind(methodInvocation)(args);                                                // 86\n                                                                                                                      //\n      if (typeof validateResult !== 'undefined') {                                                                    // 88\n        throw new Error('Returning from validate doesn\\'t do anything; perhaps you meant to throw an error?');        // 89\n      }                                                                                                               // 91\n                                                                                                                      //\n      return this.run.bind(methodInvocation)(args);                                                                   // 93\n    }                                                                                                                 // 94\n                                                                                                                      //\n    return _execute;                                                                                                  // 3\n  }();                                                                                                                // 3\n                                                                                                                      //\n  return ValidatedMethod;                                                                                             // 3\n}();                                                                                                                  // 3\n                                                                                                                      //\n// Mixins get a chance to transform the arguments before they are passed to the actual Method                         //\nfunction applyMixins(args, mixins) {                                                                                  // 98\n  // You can pass nested arrays so that people can ship mixin packs                                                   //\n  var flatMixins = _.flatten(mixins);                                                                                 // 100\n  // Save name of the method here, so we can attach it to potential error messages                                    //\n  var _args = args;                                                                                                   // 98\n  var name = _args.name;                                                                                              // 98\n                                                                                                                      //\n                                                                                                                      //\n  flatMixins.forEach(function (mixin) {                                                                               // 104\n    args = mixin(args);                                                                                               // 105\n                                                                                                                      //\n    if (!Match.test(args, Object)) {                                                                                  // 107\n      var functionName = mixin.toString().match(/function\\s(\\w+)/);                                                   // 108\n      var msg = 'One of the mixins';                                                                                  // 109\n                                                                                                                      //\n      if (functionName) {                                                                                             // 111\n        msg = 'The function \\'' + functionName[1] + '\\'';                                                             // 112\n      }                                                                                                               // 113\n                                                                                                                      //\n      throw new Error('Error in ' + name + ' method: ' + msg + ' didn\\'t return the options object.');                // 115\n    }                                                                                                                 // 116\n  });                                                                                                                 // 117\n                                                                                                                      //\n  return args;                                                                                                        // 119\n}                                                                                                                     // 120\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/mdg:validated-method/validated-method.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['mdg:validated-method'] = {}, {\n  ValidatedMethod: ValidatedMethod\n});\n\n})();\n","servePath":"/packages/mdg_validated-method.js","sourceMap":{"version":3,"sources":["/packages/mdg:validated-method/validated-method.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACE,2BAAY,OAAZ,EAAqB;AAAA;;AAAA;;;AAEnB,YAAQ,MAAR,GAAiB,QAAQ,MAAR,IAAkB,EAAnC;AACA,UAAM,QAAQ,MAAd,EAAsB,CAAC,QAAD,CAAtB;AACA,UAAM,QAAQ,IAAd,EAAoB,MAApB;AACA,cAAU,YAAY,OAAZ,EAAqB,QAAQ,MAA7B,CAAV;;;;AAIA,YAAQ,UAAR,GAAqB,QAAQ,UAAR,IAAsB,MAA3C;;;AAGA,QAAI,QAAQ,QAAR,KAAqB,IAAzB,EAA+B;AAC7B,cAAQ,QAAR,GAAmB,YAAY,CAAE,CAAjC;AACD;;;AAGD,YAAQ,YAAR,GAAuB,QAAQ,YAAR,IAAwB,EAA/C;;AAEA,UAAM,OAAN,EAAe,MAAM,eAAN,CAAsB;AACnC,YAAM,MAD6B;AAEnC,gBAAU,QAFyB;AAGnC,WAAK,QAH8B;AAInC,cAAQ,CAAC,QAAD,CAJ2B;AAKnC,kBAAY,MALuB;AAMnC,oBAAc;AANqB,KAAtB,CAAf;;;AAUA,QAAM,sBAAsB;;AAE1B,uBAAiB,IAFS;;;;AAM1B,2BAAqB;AANK,KAA5B;;AASA,YAAQ,YAAR,GAAuB,EAAE,MAAF,CAAS,EAAT,EAAa,mBAAb,EAAkC,QAAQ,YAA1C,CAAvB;;;AAGA,MAAE,MAAF,CAAS,IAAT,EAAe,OAAf;;AAEA,QAAM,SAAS,IAAf;AACA,SAAK,UAAL,CAAgB,OAAhB,gDACG,QAAQ,IADX,cACiB,IADjB,EACuB;;AAEnB,YAAM,IAAN,EAAY,MAAM,GAAlB;AACA,UAAM,mBAAmB,IAAzB;;AAEA,aAAO,OAAO,QAAP,CAAgB,gBAAhB,EAAkC,IAAlC,CAAP;AACD,KAPH;AASD;;AAtDH,4BAwDE,IAxDF;AAAA,kBAwDO,IAxDP,EAwDa,QAxDb,EAwDuB;;AAEnB,UAAI,EAAE,UAAF,CAAa,IAAb,CAAJ,EAAwB;AACtB,mBAAW,IAAX;AACA,eAAO,EAAP;AACD;;AAED,UAAI;AACF,eAAO,KAAK,UAAL,CAAgB,KAAhB,CAAsB,KAAK,IAA3B,EAAiC,CAAC,IAAD,CAAjC,EAAyC,KAAK,YAA9C,EAA4D,QAA5D,CAAP;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,YAAI,QAAJ,EAAc;;AAEZ,mBAAS,GAAT;AACD,SAHD,MAGO;;;AAGL,gBAAM,GAAN;AACD;AACF;AACF;;AA3EH;AAAA;;AAAA,4BA6EE,QA7EF;AAAA,sBA6EW,gBA7EX,EA6E6B,IA7E7B,EA6EmC;AAC/B,yBAAmB,oBAAoB,EAAvC;;;AAGA,uBAAiB,IAAjB,GAAwB,KAAK,IAA7B;;AAEA,UAAM,iBAAiB,KAAK,QAAL,CAAc,IAAd,CAAmB,gBAAnB,EAAqC,IAArC,CAAvB;;AAEA,UAAI,OAAO,cAAP,KAA0B,WAA9B,EAA2C;AACzC,cAAM,IAAI,KAAJ,sFAAN;AAED;;AAED,aAAO,KAAK,GAAL,CAAS,IAAT,CAAc,gBAAd,EAAgC,IAAhC,CAAP;AACD;;AA3FH;AAAA;;AAAA;AAAA;;;AA+FA,SAAS,WAAT,CAAqB,IAArB,EAA2B,MAA3B,EAAmC;;AAEjC,MAAM,aAAa,EAAE,OAAF,CAAU,MAAV,CAAnB;;AAFiC,cAIlB,IAJkB;AAAA,MAI1B,IAJ0B,SAI1B,IAJ0B;;;AAMjC,aAAW,OAAX,CAAmB,UAAC,KAAD,EAAW;AAC5B,WAAO,MAAM,IAAN,CAAP;;AAEA,QAAG,CAAC,MAAM,IAAN,CAAW,IAAX,EAAiB,MAAjB,CAAJ,EAA8B;AAC5B,UAAM,eAAe,MAAM,QAAN,GAAiB,KAAjB,CAAuB,iBAAvB,CAArB;AACA,UAAI,MAAM,mBAAV;;AAEA,UAAG,YAAH,EAAiB;AACf,kCAAuB,aAAa,CAAb,CAAvB;AACD;;AAED,YAAM,IAAI,KAAJ,eAAsB,IAAtB,iBAAsC,GAAtC,yCAAN;AACD;AACF,GAbD;;AAeA,SAAO,IAAP;AACD,4H","file":"/packages/mdg_validated-method.js","sourcesContent":["/* global ValidatedMethod:true */\n\nValidatedMethod = class ValidatedMethod {\n  constructor(options) {\n    // Default to no mixins\n    options.mixins = options.mixins || [];\n    check(options.mixins, [Function]);\n    check(options.name, String);\n    options = applyMixins(options, options.mixins);\n\n    // connection argument defaults to Meteor, which is where Methods are defined on client and\n    // server\n    options.connection = options.connection || Meteor;\n\n    // Allow validate: null shorthand for methods that take no arguments\n    if (options.validate === null) {\n      options.validate = function () {};\n    }\n\n    // If this is null/undefined, make it an empty object\n    options.applyOptions = options.applyOptions || {};\n\n    check(options, Match.ObjectIncluding({\n      name: String,\n      validate: Function,\n      run: Function,\n      mixins: [Function],\n      connection: Object,\n      applyOptions: Object,\n    }));\n\n    // Default options passed to Meteor.apply, can be overridden with applyOptions\n    const defaultApplyOptions = {\n      // Make it possible to get the ID of an inserted item\n      returnStubValue: true,\n\n      // Don't call the server method if the client stub throws an error, so that we don't end\n      // up doing validations twice\n      throwStubExceptions: true,\n    };\n\n    options.applyOptions = _.extend({}, defaultApplyOptions, options.applyOptions);\n\n    // Attach all options to the ValidatedMethod instance\n    _.extend(this, options);\n\n    const method = this;\n    this.connection.methods({\n      [options.name](args) {\n        // Silence audit-argument-checks since arguments are always checked when using this package\n        check(args, Match.Any);\n        const methodInvocation = this;\n\n        return method._execute(methodInvocation, args);\n      }\n    });\n  }\n\n  call(args, callback) {\n    // Accept calling with just a callback\n    if (_.isFunction(args)) {\n      callback = args;\n      args = {};\n    }\n\n    try {\n      return this.connection.apply(this.name, [args], this.applyOptions, callback);\n    } catch (err) {\n      if (callback) {\n        // Get errors from the stub in the same way as from the server-side method\n        callback(err);\n      } else {\n        // No callback passed, throw instead of silently failing; this is what\n        // \"normal\" Methods do if you don't pass a callback.\n        throw err;\n      }\n    }\n  }\n\n  _execute(methodInvocation, args) {\n    methodInvocation = methodInvocation || {};\n\n    // Add `this.name` to reference the Method name\n    methodInvocation.name = this.name;\n\n    const validateResult = this.validate.bind(methodInvocation)(args);\n\n    if (typeof validateResult !== 'undefined') {\n      throw new Error(`Returning from validate doesn't do anything; \\\nperhaps you meant to throw an error?`);\n    }\n\n    return this.run.bind(methodInvocation)(args);\n  }\n};\n\n// Mixins get a chance to transform the arguments before they are passed to the actual Method\nfunction applyMixins(args, mixins) {\n  // You can pass nested arrays so that people can ship mixin packs\n  const flatMixins = _.flatten(mixins);\n  // Save name of the method here, so we can attach it to potential error messages\n  const {name} = args;\n\n  flatMixins.forEach((mixin) => {\n    args = mixin(args);\n\n    if(!Match.test(args, Object)) {\n      const functionName = mixin.toString().match(/function\\s(\\w+)/);\n      let msg = 'One of the mixins';\n\n      if(functionName) {\n        msg = `The function '${functionName[1]}'`;\n      }\n\n      throw new Error(`Error in ${name} method: ${msg} didn't return the options object.`);\n    }\n  });\n\n  return args;\n}\n"]}}]